{"version":3,"sources":["webpack:///./src/components/voteImage.js","webpack:///./src/components/content.js","webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js","webpack:///./src/theme.js","webpack:///./src/components/link.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["voteImage","data","_3536188662","react_default","a","createElement","Container","maxWidth","gatsby_image_default","fluid","alt","useStyles","makeStyles","theme","root","marginTop","title","marginBottom","content","classes","className","Typography","variant","align","gutterBottom","href","__webpack_exports__","layout","seo","description","__webpack_require__","d","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","loader","enqueue","StaticQueryContext","React","StaticQueryDataRenderer","_ref","staticQueryData","query","render","finalData","Fragment","props","children","Consumer","m","module","require","default","location","pageResources","react__WEBPACK_IMPORTED_MODULE_1___default","_page_renderer__WEBPACK_IMPORTED_MODULE_2__","Object","assign","json","SEO","image","pathname","article","gatsby__WEBPACK_IMPORTED_MODULE_3__","_ref2","_ref2$site$siteMetada","site","siteMetadata","defaultTitle","titleTemplate","defaultDescription","siteUrl","defaultImage","url","react_helmet__WEBPACK_IMPORTED_MODULE_2__","name","property","_public_static_d_2395431821_json__WEBPACK_IMPORTED_MODULE_0__","src_theme","createMuiTheme","palette","primary","main","secondary","error","components_link","forwardRef","ref","Link_Link","underline","component","gatsby_browser_entry","flexGrow","link","display","alignItems","marginLeft","buttonInstall","avatar","padding","Header","siteTitle","_1688939613","AppBar","appBar","position","Toolbar","disableGutters","to","color","Button","header","footer","paddingTop","paddingBottom","_2170589039","ThemeProvider","myTheme","CssBaseline","Date","getFullYear"],"mappings":"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","file":"component---src-pages-index-js-7d17b42fd7e4ac329e04.js","sourcesContent":["import React from 'react'\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from 'gatsby-image'\n\nimport Container from '@material-ui/core/Container'\n\nexport default () => {\n  const data = useStaticQuery(graphql`\n    query {\n      file(relativePath: {regex: \"/votes/\"}) {\n        id\n        childImageSharp {\n          fluid {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  `)\n  return (\n    <Container maxWidth=\"xs\">\n      <Img fluid={data.file.childImageSharp.fluid} alt=\"Shows vote totals, vote breakdown and vote results for a sample project\" />\n    </Container>\n  )\n}","import React from 'react'\n\nimport Container from '@material-ui/core/Container'\nimport Typography from '@material-ui/core/Typography'\n\nimport { makeStyles } from '@material-ui/core/styles'\n\n\n//import MergeImage from './mergeImage'\nimport VoteImage from './voteImage'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: theme.spacing(12)\n  },\n  title: {\n    marginBottom: theme.spacing(4)\n  }\n}))\n\nconst Content = () => {\n  const classes = useStyles()\n    return (\n      <Container maxWidth=\"md\" className={classes.root}>\n        <Typography className={classes.title} variant=\"h4\" align=\"center\">Getting Started</Typography>\n        \n        <Typography gutterBottom variant=\"body1\">GitConsensus makes it possible to automate project governance on GitHub by using “reactions” as a voting mechanism to automatically merge (or close) pull requests.</Typography>\n        {/* <MergeImage /> */}\n\n        <Typography variant=\"h5\" gutterBottom>Installation</Typography>\n        <Typography variant=\"body1\" gutterBottom>On the <a href=\"https://github.com/gitconsensus/\">GitConsensusApp Page on Github</a> find the Configure button to start. From there you can select where to install it to.</Typography>\n        <Typography variant=\"body1\" gutterBottom>Once installed each repository which should be managed by GitConsensus needs a .gitconsensus.yaml file to define the consensus rules used by the project. Repositories without this file will simply be ignored. A variety of <a href=\"https://github.com/gitconsensus/gitconsensus_examples\">example files</a> exist to help get started, and these <a href=\"https://github.com/gitconsensus/gitconsensus_examples/blob/master/examples/recommended/.gitconsensus.yaml\">recommended consensus</a> rules should be a great starting point for most projects.</Typography>\n        <Typography variant=\"h5\" gutterBottom>Voting</Typography>\n        <Typography variant=\"body1\" gutterBottom>Votes are made by using reactions on the top level comment of the Pull Request.</Typography>\n        <VoteImage />\n        <Typography variant=\"body1\" gutterBottom>An Abstain vote counts when calculating quorum but is discarded when checking to see if the vote passed.</Typography>\n        <Typography variant=\"body1\" gutterBottom>Voting for more than one option can be disabled on a per project basis.</Typography>\n        <Typography variant=\"h5\" gutterBottom>Label Overrides</Typography>\n        <Typography variant=\"body1\" gutterBottom>Any pull request with a WIP or DONTMERGE label (case insensitive) will be skipped over.</Typography>\n      </Container>\n    )\n}\n\nexport default Content\n\n","import React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Content from \"../components/content\"\n\nimport 'typeface-roboto'\n\nconst IndexPage = () => (\n  <Layout>\n    <SEO title=\"GitConsensus\" description=\"Automate Open Source Software Management\" />\n    <Content />\n  </Layout>\n)\n\nexport default IndexPage\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport { Helmet } from 'react-helmet'\nimport PropTypes from 'prop-types'\nimport { StaticQuery, graphql } from 'gatsby'\n\nconst SEO = ({ title, description, image, pathname, article }) => (\n  <StaticQuery\n    query={query}\n    render={({\n      site: {\n        siteMetadata: {\n          defaultTitle,\n          titleTemplate,\n          defaultDescription,\n          siteUrl,\n          defaultImage\n        }\n      }\n    }) => {\n      const seo = {\n        title: title || defaultTitle,\n        description: description || defaultDescription,\n        image: `${siteUrl}${image || defaultImage}`,\n        url: `${siteUrl}${pathname || '/'}`\n      }\n      return (\n        <Helmet title={seo.title} titleTemplate={titleTemplate}>\n          <meta name=\"description\" content={seo.description} />\n          <meta name=\"image\" content={seo.image} />\n          {seo.url && <meta property=\"og:url\" content={seo.url} />}\n          {(article ? true : null) && (\n            <meta property=\"og:type\" content=\"article\" />\n          )}\n          {seo.title && <meta property=\"og:title\" content={seo.title} />}\n          {seo.description && (\n            <meta property=\"og:description\" content={seo.description} />\n          )}\n          {seo.image && <meta property=\"og:image\" content={seo.image} />}\n          <meta name=\"twitter:card\" content=\"summary_large_image\" />\n          {/* {twitterUsername && (\n            <meta name=\"twitter:creator\" content={twitterUsername} />\n          )} */}\n          {seo.title && <meta name=\"twitter:title\" content={seo.title} />}\n          {seo.description && (\n            <meta name=\"twitter:description\" content={seo.description} />\n          )}\n          {seo.image && <meta name=\"twitter:image\" content={seo.image} />}\n        </Helmet>\n      )\n    }}\n  />\n)\n\nexport default SEO\n\nconst query = graphql`\n  query SEO {\n    site {\n      siteMetadata {\n        defaultTitle: title\n        titleTemplate\n        defaultDescription: description\n        siteUrl: url\n        defaultImage: image\n      }\n    }\n  }\n`\n\nSEO.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  image: PropTypes.string,\n  pathname: PropTypes.string,\n  article: PropTypes.bool\n}\n\nSEO.defaultProps = {\n  title: null,\n  description: null,\n  image: null,\n  pathname: null,\n  article: false\n}","import { createMuiTheme } from '@material-ui/core/styles'\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#80d8ff',\n    },\n    secondary: {\n      main: '#212121',\n    },\n    error: {\n      main: '#d81b60',\n    }\n  },\n});\n\nexport default theme;","import React from 'react'\nimport MuiLink from '@material-ui/core/Link'\nimport { Link as GatsbyLink } from 'gatsby'\n\nconst Link = React.forwardRef(function Link(props, ref) {\n  return <MuiLink underline=\"none\" component={GatsbyLink} ref={ref} {...props} />\n})\n\nexport default Link","import PropTypes from \"prop-types\"\nimport React from \"react\"\n\nimport { useStaticQuery, graphql } from 'gatsby'\nimport Img from \"gatsby-image\"\n\nimport GatsbyLink from './link'\n\nimport AppBar from '@material-ui/core/AppBar'\nimport Button from '@material-ui/core/Button'\nimport Container from '@material-ui/core/Container'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\n\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  link: {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    flexGrow: 1\n  },\n  title: {\n    marginLeft: theme.spacing(1)\n  },\n  buttonInstall: {\n    marginLeft: theme.spacing(1)\n  },\n  avatar: {\n    padding: theme.spacing(2.2)\n  }\n}))\n\n\nconst Header = ({ siteTitle }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      file(relativePath: {regex: \"/logo/\"}) {\n        childImageSharp {\n          id\n          fluid {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  `)\n  const classes = useStyles()\n  return (\n    <div className={classes.root}>\n      <AppBar className={classes.appBar} position=\"fixed\">\n        <Container maxWidth=\"md\">\n          <Toolbar disableGutters>\n            \n            <GatsbyLink className={classes.link} to=\"/\" color=\"secondary\">\n              <Img className={classes.avatar} fluid={data.file.childImageSharp.fluid} alt=\"logo\" />\n              <Typography variant=\"h6\" className={classes.title}>{siteTitle}</Typography>\n            </GatsbyLink>\n            <Button\n              component=\"button\"\n              variant=\"outlined\"\n              href=\"/configBuilder\"\n              color=\"secondary\"\n            >\n              Config Builder\n              </Button>\n            <Button\n              component=\"button\"\n              variant=\"outlined\"\n              href=\"https://github.com/apps/gitconsensus\"\n              color=\"secondary\"\n              className={classes.buttonInstall}\n              >\n                Install On GitHub\n              </Button>\n          </Toolbar>\n        </Container>\n      </AppBar>\n    </div>\n  )\n}\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n  description: PropTypes.string\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n  description: ``\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { ThemeProvider } from '@material-ui/styles'\n\nimport Button from '@material-ui/core/Button'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Container from '@material-ui/core/Container'\nimport Typography from '@material-ui/core/Typography'\nimport myTheme from '../theme'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport Header from \"./header\"\n\nconst useStyles = makeStyles(theme => ({\n  footer: {\n    paddingTop: theme.spacing(2)\n  },\n  main: {\n    paddingBottom: theme.spacing(2)\n  }\n}))\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n          description\n        }\n      }\n    }\n  `)\n\n  const classes = useStyles()\n  return (\n    <>\n      <ThemeProvider theme={myTheme}>\n        <CssBaseline />\n        <Header siteTitle={data.site.siteMetadata.title} description={data.site.siteMetadata.description} />\n        <Container maxWidth=\"md\">\n          <main className={classes.main}>{children}</main>\n          <footer className={classes.footer}>\n            <Typography variant=\"body1\" gutterBottom>\n              © {new Date().getFullYear()} <a href=\"https://projects.tedivm.com\">Robert Hafner</a>\n            </Typography>\n            <Typography variant=\"body1\" gutterBottom>Homepage built with\n                {` `}\n              <a href=\"https://www.gatsbyjs.org\">Gatsby</a> by <a href=\"https://www.alilynne.com\">AliLynne</a>.</Typography>\n          </footer>\n        </Container>\n      </ThemeProvider>\n      \n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}