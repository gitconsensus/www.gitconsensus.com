{"version":3,"sources":["webpack:///./src/components/mergeImage.js","webpack:///./src/components/voteImage.js","webpack:///./src/components/content.js","webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/components/link.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js","webpack:///./src/theme.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["mergeImage","data","_3677026870","react_default","a","createElement","Container","maxWidth","gatsby_image_default","fluid","voteImage","_3536188662","alt","useStyles","makeStyles","theme","root","marginTop","title","marginBottom","content","classes","className","Typography","variant","align","gutterBottom","href","__webpack_exports__","layout","seo","description","__webpack_require__","d","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","loader","enqueue","StaticQueryContext","React","StaticQueryDataRenderer","_ref","staticQueryData","query","render","finalData","Fragment","props","children","Consumer","m","module","require","default","Link","react__WEBPACK_IMPORTED_MODULE_1___default","forwardRef","ref","_material_ui_core_Link__WEBPACK_IMPORTED_MODULE_2__","Object","assign","underline","component","gatsby__WEBPACK_IMPORTED_MODULE_3__","location","pageResources","_page_renderer__WEBPACK_IMPORTED_MODULE_2__","json","SEO","image","pathname","article","_ref2","_ref2$site$siteMetada","site","siteMetadata","defaultTitle","titleTemplate","defaultDescription","siteUrl","defaultImage","url","react_helmet__WEBPACK_IMPORTED_MODULE_2__","name","property","_public_static_d_2395431821_json__WEBPACK_IMPORTED_MODULE_0__","src_theme","createMuiTheme","palette","primary","main","secondary","error","flexGrow","link","display","alignItems","marginLeft","buttonInstall","avatar","padding","Header","siteTitle","_690751467","AppBar","appBar","position","Toolbar","disableGutters","components_link","to","color","Button","header","footer","paddingTop","paddingBottom","_2170589039","ThemeProvider","myTheme","CssBaseline","Date","getFullYear"],"mappings":"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","file":"component---src-pages-index-js-7c07a4ce05adc9d9b0e1.js","sourcesContent":["import React from 'react'\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from 'gatsby-image'\n\nimport Container from '@material-ui/core/Container'\n\nexport default () => {\n  const data = useStaticQuery(graphql`\n    query {\n      file(relativePath: {regex: \"/merge/\"}) {\n        id\n        childImageSharp {\n          fluid {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  `)\n  return(\n    <Container maxWidth=\"xs\">\n      <Img fluid={data.file.childImageSharp.fluid} />\n    </Container>\n    \n  )\n}","import React from 'react'\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from 'gatsby-image'\n\nimport Container from '@material-ui/core/Container'\n\nexport default () => {\n  const data = useStaticQuery(graphql`\n    query {\n      file(relativePath: {regex: \"/votes/\"}) {\n        id\n        childImageSharp {\n          fluid {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  `)\n  return (\n    <Container maxWidth=\"xs\">\n      <Img fluid={data.file.childImageSharp.fluid} alt=\"Shows vote totals, vote breakdown and vote results for a sample project\" />\n    </Container>\n  )\n}","import React from 'react'\n\nimport Container from '@material-ui/core/Container'\nimport Typography from '@material-ui/core/Typography'\n\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport GatsbyLink from './link'\nimport MergeImage from './mergeImage'\nimport VoteImage from './voteImage'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: theme.spacing(12)\n  },\n  title: {\n    marginBottom: theme.spacing(4)\n  }\n}))\n\nconst Content = () => {\n  const classes = useStyles()\n    return (\n      <Container maxWidth=\"md\" className={classes.root}>\n        <Typography className={classes.title} variant=\"h4\" align=\"center\">Getting Started</Typography>\n        \n        <Typography gutterBottom variant=\"body1\">GitConsensus makes it possible to automate project governance on GitHub by using “reactions” as a voting mechanism to automatically merge (or close) pull requests.</Typography>\n        <MergeImage />\n\n        <Typography variant=\"h5\" gutterBottom>Installation</Typography>\n        <Typography variant=\"body1\" gutterBottom>On the <a href=\"https://github.com/gitconsensus/\">GitConsensusApp Page on Github</a> find the Configure button to start. From there you can select where to install it to.</Typography>\n        <Typography variant=\"body1\" gutterBottom>Once installed each repository which should be managed by GitConsensus needs a .gitconsensus.yaml file to define the consensus rules used by the project. Repositories without this file will simply be ignored. A variety of <a href=\"https://github.com/gitconsensus/gitconsensus_examples\">example files</a> exist to help get started, and these <a href=\"https://github.com/gitconsensus/gitconsensus_examples/blob/master/examples/recommended/.gitconsensus.yaml\">recommended consensus</a> rules should be a great starting point for most projects.</Typography>\n        <Typography variant=\"h5\" gutterBottom>Voting</Typography>\n        <Typography variant=\"body1\" gutterBottom>Votes are made by using reactions on the top level comment of the Pull Request.</Typography>\n        <VoteImage />\n        <Typography variant=\"body1\" gutterBottom>An Abstain vote counts when calculating quorum but is discarded when checking to see if the vote passed.</Typography>\n        <Typography variant=\"body1\" gutterBottom>Voting for more than one option can be disabled on a per project basis.</Typography>\n        <Typography variant=\"h5\" gutterBottom>Label Overrides</Typography>\n        <Typography variant=\"body1\" gutterBottom>Any pull request with a WIP or DONTMERGE label (case insensitive) will be skipped over.</Typography>\n      </Container>\n    )\n}\n\nexport default Content\n\n","import React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Content from \"../components/content\"\n\nimport 'typeface-roboto'\n\nconst IndexPage = () => (\n  <Layout>\n    <SEO title=\"GitConsensus\" description=\"Automate Open Source Software Management\" />\n    <Content />\n  </Layout>\n)\n\nexport default IndexPage\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from 'react'\nimport MuiLink from '@material-ui/core/Link'\nimport { Link as GatsbyLink } from 'gatsby'\n\nconst Link = React.forwardRef(function Link(props, ref) {\n  return <MuiLink underline=\"none\" component={GatsbyLink} ref={ref} {...props} />\n})\n\nexport default Link","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport { Helmet } from 'react-helmet'\nimport PropTypes from 'prop-types'\nimport { StaticQuery, graphql } from 'gatsby'\n\nconst SEO = ({ title, description, image, pathname, article }) => (\n  <StaticQuery\n    query={query}\n    render={({\n      site: {\n        siteMetadata: {\n          defaultTitle,\n          titleTemplate,\n          defaultDescription,\n          siteUrl,\n          defaultImage\n        }\n      }\n    }) => {\n      const seo = {\n        title: title || defaultTitle,\n        description: description || defaultDescription,\n        image: `${siteUrl}${image || defaultImage}`,\n        url: `${siteUrl}${pathname || '/'}`\n      }\n      return (\n        <Helmet title={seo.title} titleTemplate={titleTemplate}>\n          <meta name=\"description\" content={seo.description} />\n          <meta name=\"image\" content={seo.image} />\n          {seo.url && <meta property=\"og:url\" content={seo.url} />}\n          {(article ? true : null) && (\n            <meta property=\"og:type\" content=\"article\" />\n          )}\n          {seo.title && <meta property=\"og:title\" content={seo.title} />}\n          {seo.description && (\n            <meta property=\"og:description\" content={seo.description} />\n          )}\n          {seo.image && <meta property=\"og:image\" content={seo.image} />}\n          <meta name=\"twitter:card\" content=\"summary_large_image\" />\n          {/* {twitterUsername && (\n            <meta name=\"twitter:creator\" content={twitterUsername} />\n          )} */}\n          {seo.title && <meta name=\"twitter:title\" content={seo.title} />}\n          {seo.description && (\n            <meta name=\"twitter:description\" content={seo.description} />\n          )}\n          {seo.image && <meta name=\"twitter:image\" content={seo.image} />}\n        </Helmet>\n      )\n    }}\n  />\n)\n\nexport default SEO\n\nconst query = graphql`\n  query SEO {\n    site {\n      siteMetadata {\n        defaultTitle: title\n        titleTemplate\n        defaultDescription: description\n        siteUrl: url\n        defaultImage: image\n      }\n    }\n  }\n`\n\nSEO.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  image: PropTypes.string,\n  pathname: PropTypes.string,\n  article: PropTypes.bool\n}\n\nSEO.defaultProps = {\n  title: null,\n  description: null,\n  image: null,\n  pathname: null,\n  article: false\n}","import { createMuiTheme } from '@material-ui/core/styles'\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#80d8ff',\n    },\n    secondary: {\n      main: '#212121',\n    },\n    error: {\n      main: '#d81b60',\n    }\n  },\n});\n\nexport default theme;","import PropTypes from \"prop-types\"\nimport React from \"react\"\n\nimport { useStaticQuery, graphql } from 'gatsby'\nimport Img from \"gatsby-image\"\n\nimport GatsbyLink from './link'\n\nimport AppBar from '@material-ui/core/AppBar'\nimport Button from '@material-ui/core/Button'\nimport Container from '@material-ui/core/Container'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\n\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  link: {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    flexGrow: 1\n  },\n  title: {\n    marginLeft: theme.spacing(1)\n  },\n  buttonInstall: {\n    marginLeft: theme.spacing(1)\n  },\n  avatar: {\n    padding: theme.spacing(2.2)\n  }\n}))\n\n\nconst Header = ({ siteTitle }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      file(relativePath: {regex: \"/logo/\"}) {\n        id\n        childImageSharp {\n          fluid {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  `)\n  const classes = useStyles()\n  return (\n    <div className={classes.root}>\n      <AppBar className={classes.appBar} position=\"fixed\">\n        <Container maxWidth=\"md\">\n          <Toolbar disableGutters>\n            \n            <GatsbyLink className={classes.link} to=\"/\" color=\"secondary\">\n              <Img className={classes.avatar} fluid={data.file.childImageSharp.fluid} alt=\"logo\" />\n              <Typography variant=\"h6\" className={classes.title}>{siteTitle}</Typography>\n            </GatsbyLink>\n            <Button\n              component=\"button\"\n              variant=\"outlined\"\n              href=\"/configBuilder\"\n              color=\"secondary\"\n            >\n              Config Builder\n              </Button>\n            <Button\n              component=\"button\"\n              variant=\"outlined\"\n              href=\"https://github.com/apps/gitconsensus\"\n              color=\"secondary\"\n              className={classes.buttonInstall}\n              >\n                Install On GitHub\n              </Button>\n          </Toolbar>\n        </Container>\n      </AppBar>\n    </div>\n  )\n}\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n  description: PropTypes.string\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n  description: ``\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { ThemeProvider } from '@material-ui/styles'\n\nimport Button from '@material-ui/core/Button'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Container from '@material-ui/core/Container'\nimport Typography from '@material-ui/core/Typography'\nimport myTheme from '../theme'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport Header from \"./header\"\n\nconst useStyles = makeStyles(theme => ({\n  footer: {\n    paddingTop: theme.spacing(2)\n  },\n  main: {\n    paddingBottom: theme.spacing(2)\n  }\n}))\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n          description\n        }\n      }\n    }\n  `)\n\n  const classes = useStyles()\n  return (\n    <>\n      <ThemeProvider theme={myTheme}>\n        <CssBaseline />\n        <Header siteTitle={data.site.siteMetadata.title} description={data.site.siteMetadata.description} />\n        <Container maxWidth=\"md\">\n          <main className={classes.main}>{children}</main>\n          <footer className={classes.footer}>\n            <Typography variant=\"body1\" gutterBottom>\n              © {new Date().getFullYear()} <a href=\"https://projects.tedivm.com\">Robert Hafner</a>\n            </Typography>\n            <Typography variant=\"body1\" gutterBottom>Homepage built with\n                {` `}\n              <a href=\"https://www.gatsbyjs.org\">Gatsby</a> by <a href=\"https://www.alilynne.com\">AliLynne</a>.</Typography>\n          </footer>\n        </Container>\n      </ThemeProvider>\n      \n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}